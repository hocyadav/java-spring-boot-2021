/*
 * Listings API
 * # Listings Platform API This service exposes a set of cohesive APIs that allow businesses to create, manage and curate listings for one or more marketplaces in the Flipkart group of companies. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sp-slm-dev@flipkart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.hari.machinecodingtips.entities_layer.lld.others;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.flipkart.marketplace.listings.ports.outbound.web.listings.model.ContextValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * The context in which this listing exists. 
 */
@ApiModel(description = "The context in which this listing exists. ")
@JsonPropertyOrder({
  ListingItemContext.JSON_PROPERTY_ROOT_CONTEXT_ID,
  ListingItemContext.JSON_PROPERTY_SELLER_ID,
  ListingItemContext.JSON_PROPERTY_OVERRIDES,
  ListingItemContext.JSON_PROPERTY_RETIRED_OVERRIDES
})
@JsonTypeName("ListingItem_context")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-24T14:20:17.930928+05:30[Asia/Kolkata]")
public class ListingItemContext implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ROOT_CONTEXT_ID = "root_context_id";
  private UUID rootContextId;

  public static final String JSON_PROPERTY_SELLER_ID = "seller_id";
  private String sellerId;

  public static final String JSON_PROPERTY_OVERRIDES = "overrides";
  private List<List<ContextValue>> overrides = null;

  public static final String JSON_PROPERTY_RETIRED_OVERRIDES = "retired_overrides";
  private List<List<ContextValue>> retiredOverrides = null;


  public ListingItemContext rootContextId(UUID rootContextId) {
    
    this.rootContextId = rootContextId;
    return this;
  }

   /**
   * The root context ID under which this listing is valid.
   * @return rootContextId
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The root context ID under which this listing is valid.")
  @JsonProperty(JSON_PROPERTY_ROOT_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getRootContextId() {
    return rootContextId;
  }


  public void setRootContextId(UUID rootContextId) {
    this.rootContextId = rootContextId;
  }


  public ListingItemContext sellerId(String sellerId) {
    
    this.sellerId = sellerId;
    return this;
  }

   /**
   * The seller who owns this listing.
   * @return sellerId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The seller who owns this listing.")
  @JsonProperty(JSON_PROPERTY_SELLER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSellerId() {
    return sellerId;
  }


  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public ListingItemContext overrides(List<List<ContextValue>> overrides) {
    
    this.overrides = overrides;
    return this;
  }

  public ListingItemContext addOverridesItem(List<ContextValue> overridesItem) {
    if (this.overrides == null) {
      this.overrides = new ArrayList<>();
    }
    this.overrides.add(overridesItem);
    return this;
  }

   /**
   * Valid overrides 
   * @return overrides
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Valid overrides ")
  @JsonProperty(JSON_PROPERTY_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<ContextValue>> getOverrides() {
    return overrides;
  }


  public void setOverrides(List<List<ContextValue>> overrides) {
    this.overrides = overrides;
  }


  public ListingItemContext retiredOverrides(List<List<ContextValue>> retiredOverrides) {
    
    this.retiredOverrides = retiredOverrides;
    return this;
  }

  public ListingItemContext addRetiredOverridesItem(List<ContextValue> retiredOverridesItem) {
    if (this.retiredOverrides == null) {
      this.retiredOverrides = new ArrayList<>();
    }
    this.retiredOverrides.add(retiredOverridesItem);
    return this;
  }

   /**
   * The set of retired overrides. It is intended to be used when a previously applied override is no longer relevant. In order to allow clients to gracefully plan for a permanent removal of the context override, we preserve the set of deleted overrides. 
   * @return retiredOverrides
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The set of retired overrides. It is intended to be used when a previously applied override is no longer relevant. In order to allow clients to gracefully plan for a permanent removal of the context override, we preserve the set of deleted overrides. ")
  @JsonProperty(JSON_PROPERTY_RETIRED_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<List<ContextValue>> getRetiredOverrides() {
    return retiredOverrides;
  }


  public void setRetiredOverrides(List<List<ContextValue>> retiredOverrides) {
    this.retiredOverrides = retiredOverrides;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingItemContext listingItemContext = (ListingItemContext) o;
    return Objects.equals(this.rootContextId, listingItemContext.rootContextId) &&
        Objects.equals(this.sellerId, listingItemContext.sellerId) &&
        Objects.equals(this.overrides, listingItemContext.overrides) &&
        Objects.equals(this.retiredOverrides, listingItemContext.retiredOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootContextId, sellerId, overrides, retiredOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingItemContext {\n");
    sb.append("    rootContextId: ").append(toIndentedString(rootContextId)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    retiredOverrides: ").append(toIndentedString(retiredOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

