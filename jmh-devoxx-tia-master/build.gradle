apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'me.champeau.gradle.jmh'

buildscript {
	repositories {
	   jcenter()
	}
	dependencies {
	   classpath 'me.champeau.gradle:jmh-gradle-plugin:0.2.0'
	}
}
sourceCompatibility = 1.6

version = '0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
	jmh 'org.openjdk.jmh:jmh-core:1.3.2' 
}

jmh {
	
	include = System.properties['testToExecute']!=null?System.properties['testToExecute']:'.*Simple*'
	
	//include = '.*Simple*'
	//include = '.*Profiler*'
	//include = '.*ConsumerProducer*'

	// include = '.*Sync*'//'some regular expression' // include pattern (regular expression) for benchmarks to be executed
	// exclude = 'some regular expression' // exclude pattern (regular expression) for benchmarks to be executed
	iterations = 1 // Number of measurement iterations to do.
	benchmarkMode = 'thrpt'//'thrpt' // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
	batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
	fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
	// failOnError = false // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
	forceGC = true // Should JMH force GC between iterations?
	// jvm = 'myjvm' // Custom JVM to use when forking.
	// jvmArgs = '-Xmx1024 '//'Custom JVM args to use when forking.'
	// jvmArgsAppend = '-X'//'Custom JVM args to use when forking (append these)'
	// jvmArgsPrepend = 'Custom JVM args to use when forking (prepend these)'
	humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
	resultsFile = project.file("${project.buildDir}/reports/jmh/results.csv") // results file
	operationsPerInvocation = 1 // Operations per invocation.
	// benchmarkParameters =  [:] // Benchmark parameters.
	profilers = System.properties['profilers']!=null?['COMP', 'STACK']:null //['COMP','GC', 'STACK','CL'] // Use profilers to collect additional data.
	timeOnIteration = '10s' // Time to spend at each measurement iteration.
	// resultFormat = 'TEXT' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
	// synchronizeIterations = false // Synchronize iterations?
	threads = 8 // Number of worker threads to run with.
	// threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
	timeUnit = 's' // Output time unit. Available time units are: [m, s, ms, us, ns].
	verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
	warmup = '2s' // Time to spend at each warmup iteration.
	warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
	warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
	warmupIterations = 1 // Number of warmup iterations to do.
	warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
	// warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
  
	zip64 = true // Use ZIP64 format for bigger archives
	version = '1.3.2' // Specifies JMH version
	//includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
}

// make sure the eclipse classpath includes the dependencies from the jmh gradle configuration
plugins.withType(EclipsePlugin) {
  project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
}