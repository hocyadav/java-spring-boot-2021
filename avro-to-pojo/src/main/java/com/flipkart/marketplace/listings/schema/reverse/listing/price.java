/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.flipkart.marketplace.listings.schema.reverse.listing;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class price extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2950683626819768033L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"price\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"buying_price\",\"type\":{\"type\":\"record\",\"name\":\"money\",\"namespace\":\"com.flipkart.marketplace.listings.schema.datatypes\",\"fields\":[{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"currency\",\"type\":\"string\",\"default\":\"INR\"}]},\"presentationName\":\"Buying Price\",\"description\":\"The buying price offered to customers.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.flipkart.marketplace.listings.schema.datatypes.money buying_price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public price() {}

  /**
   * All-args constructor.
   * @param buying_price The new value for buying_price
   */
  public price(com.flipkart.marketplace.listings.schema.datatypes.money buying_price) {
    this.buying_price = buying_price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return buying_price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: buying_price = (com.flipkart.marketplace.listings.schema.datatypes.money)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'buying_price' field.
   * @return The value of the 'buying_price' field.
   */
  public com.flipkart.marketplace.listings.schema.datatypes.money getBuyingPrice() {
    return buying_price;
  }

  /**
   * Sets the value of the 'buying_price' field.
   * @param value the value to set.
   */
  public void setBuyingPrice(com.flipkart.marketplace.listings.schema.datatypes.money value) {
    this.buying_price = value;
  }

  /**
   * Creates a new price RecordBuilder.
   * @return A new price RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder newBuilder() {
    return new com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder();
  }

  /**
   * Creates a new price RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new price RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder newBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder other) {
    return new com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder(other);
  }

  /**
   * Creates a new price RecordBuilder by copying an existing price instance.
   * @param other The existing instance to copy.
   * @return A new price RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder newBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.price other) {
    return new com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder(other);
  }

  /**
   * RecordBuilder for price instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<price>
    implements org.apache.avro.data.RecordBuilder<price> {

    private com.flipkart.marketplace.listings.schema.datatypes.money buying_price;
    private com.flipkart.marketplace.listings.schema.datatypes.money.Builder buying_priceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.buying_price)) {
        this.buying_price = data().deepCopy(fields()[0].schema(), other.buying_price);
        fieldSetFlags()[0] = true;
      }
      if (other.hasBuyingPriceBuilder()) {
        this.buying_priceBuilder = com.flipkart.marketplace.listings.schema.datatypes.money.newBuilder(other.getBuyingPriceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing price instance
     * @param other The existing instance to copy.
     */
    private Builder(com.flipkart.marketplace.listings.schema.reverse.listing.price other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.buying_price)) {
        this.buying_price = data().deepCopy(fields()[0].schema(), other.buying_price);
        fieldSetFlags()[0] = true;
      }
      this.buying_priceBuilder = null;
    }

    /**
      * Gets the value of the 'buying_price' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.datatypes.money getBuyingPrice() {
      return buying_price;
    }

    /**
      * Sets the value of the 'buying_price' field.
      * @param value The value of 'buying_price'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder setBuyingPrice(com.flipkart.marketplace.listings.schema.datatypes.money value) {
      validate(fields()[0], value);
      this.buying_priceBuilder = null;
      this.buying_price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'buying_price' field has been set.
      * @return True if the 'buying_price' field has been set, false otherwise.
      */
    public boolean hasBuyingPrice() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'buying_price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.datatypes.money.Builder getBuyingPriceBuilder() {
      if (buying_priceBuilder == null) {
        if (hasBuyingPrice()) {
          setBuyingPriceBuilder(com.flipkart.marketplace.listings.schema.datatypes.money.newBuilder(buying_price));
        } else {
          setBuyingPriceBuilder(com.flipkart.marketplace.listings.schema.datatypes.money.newBuilder());
        }
      }
      return buying_priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'buying_price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder setBuyingPriceBuilder(com.flipkart.marketplace.listings.schema.datatypes.money.Builder value) {
      clearBuyingPrice();
      buying_priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'buying_price' field has an active Builder instance
     * @return True if the 'buying_price' field has an active Builder instance
     */
    public boolean hasBuyingPriceBuilder() {
      return buying_priceBuilder != null;
    }

    /**
      * Clears the value of the 'buying_price' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder clearBuyingPrice() {
      buying_price = null;
      buying_priceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public price build() {
      try {
        price record = new price();
        if (buying_priceBuilder != null) {
          record.buying_price = this.buying_priceBuilder.build();
        } else {
          record.buying_price = fieldSetFlags()[0] ? this.buying_price : (com.flipkart.marketplace.listings.schema.datatypes.money) defaultValue(fields()[0]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
