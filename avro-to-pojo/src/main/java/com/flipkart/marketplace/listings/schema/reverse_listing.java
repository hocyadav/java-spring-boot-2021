/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.flipkart.marketplace.listings.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class reverse_listing extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3870353518023132799L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"reverse_listing\",\"namespace\":\"com.flipkart.marketplace.listings.schema\",\"fields\":[{\"name\":\"price\",\"type\":{\"type\":\"record\",\"name\":\"price\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"buying_price\",\"type\":{\"type\":\"record\",\"name\":\"money\",\"namespace\":\"com.flipkart.marketplace.listings.schema.datatypes\",\"fields\":[{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"currency\",\"type\":\"string\",\"default\":\"INR\"}]},\"presentationName\":\"Buying Price\",\"description\":\"The buying price offered to customers.\"}]},\"presentationName\":\"Price\",\"description\":\"Define the pricing parameters for your listing.\"},{\"name\":\"seller_identifier\",\"type\":{\"type\":\"record\",\"name\":\"seller_identifier\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"product_id\",\"type\":\"string\",\"presentationName\":\"FSN\",\"description\":\"Catalog product ID\"},{\"name\":\"sku_id\",\"type\":\"string\",\"presentationName\":\"SKU ID\",\"description\":\"Seller SKU ID\"}]},\"presentationName\":\"Seller Identifier Information\",\"description\":\"Record keeping information for the sellers' use.\"},{\"name\":\"buying_criteria\",\"type\":{\"type\":\"record\",\"name\":\"buying_criteria\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"origin\",\"type\":\"string\",\"presentationName\":\"Origin\",\"description\":\"Origin of the product.\"},{\"name\":\"tenure\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"buying_criteria_tenure\",\"fields\":[{\"name\":\"end\",\"type\":\"int\",\"presentationName\":\"Tenure End\",\"description\":\"End of the tenure\"},{\"name\":\"start\",\"type\":\"int\",\"presentationName\":\"Tenure Start\",\"description\":\"Start of the tenure\"},{\"name\":\"unit\",\"type\":\"string\",\"presentationName\":\"Tenure Unit\",\"description\":\"Unit of the tenure\"}],\"version\":\"1.0\"}],\"default\":null,\"presentationName\":\"Tenure\",\"description\":\"Criteria tenure.\"},{\"name\":\"grade\",\"type\":\"string\",\"presentationName\":\"Grade\",\"description\":\"Grade refers to the condition of the product.\"}]},\"presentationName\":\"Buying Criteria\",\"description\":\"Criteria that is used by FK to buy the old product.\"},{\"name\":\"order_policy\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"order_policy\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"independent_sellable\",\"type\":\"boolean\",\"presentationName\":\"Independently Sellable?\",\"description\":\"Whether this product can be sold independently.\"}]}],\"default\":null,\"presentationName\":\"Order Policies\",\"description\":\"Policies to control the customer order experience.\"},{\"name\":\"tax\",\"type\":{\"type\":\"record\",\"name\":\"tax\",\"namespace\":\"com.flipkart.marketplace.listings.schema.reverse.listing\",\"fields\":[{\"name\":\"hsn\",\"type\":\"string\",\"presentationName\":\"HSN\",\"description\":\"Harmonized System Number as per GoI\"}]},\"presentationName\":\"Tax Information\",\"description\":\"Relevant tax information.\"}],\"version\":\"1.0\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.flipkart.marketplace.listings.schema.reverse.listing.price price;
  @Deprecated public com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier seller_identifier;
  @Deprecated public com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria buying_criteria;
  @Deprecated public com.flipkart.marketplace.listings.schema.reverse.listing.order_policy order_policy;
  @Deprecated public com.flipkart.marketplace.listings.schema.reverse.listing.tax tax;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public reverse_listing() {}

  /**
   * All-args constructor.
   * @param price The new value for price
   * @param seller_identifier The new value for seller_identifier
   * @param buying_criteria The new value for buying_criteria
   * @param order_policy The new value for order_policy
   * @param tax The new value for tax
   */
  public reverse_listing(com.flipkart.marketplace.listings.schema.reverse.listing.price price, com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier seller_identifier, com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria buying_criteria, com.flipkart.marketplace.listings.schema.reverse.listing.order_policy order_policy, com.flipkart.marketplace.listings.schema.reverse.listing.tax tax) {
    this.price = price;
    this.seller_identifier = seller_identifier;
    this.buying_criteria = buying_criteria;
    this.order_policy = order_policy;
    this.tax = tax;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return seller_identifier;
    case 2: return buying_criteria;
    case 3: return order_policy;
    case 4: return tax;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (com.flipkart.marketplace.listings.schema.reverse.listing.price)value$; break;
    case 1: seller_identifier = (com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier)value$; break;
    case 2: buying_criteria = (com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria)value$; break;
    case 3: order_policy = (com.flipkart.marketplace.listings.schema.reverse.listing.order_policy)value$; break;
    case 4: tax = (com.flipkart.marketplace.listings.schema.reverse.listing.tax)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public com.flipkart.marketplace.listings.schema.reverse.listing.price getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(com.flipkart.marketplace.listings.schema.reverse.listing.price value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'seller_identifier' field.
   * @return The value of the 'seller_identifier' field.
   */
  public com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier getSellerIdentifier() {
    return seller_identifier;
  }

  /**
   * Sets the value of the 'seller_identifier' field.
   * @param value the value to set.
   */
  public void setSellerIdentifier(com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier value) {
    this.seller_identifier = value;
  }

  /**
   * Gets the value of the 'buying_criteria' field.
   * @return The value of the 'buying_criteria' field.
   */
  public com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria getBuyingCriteria() {
    return buying_criteria;
  }

  /**
   * Sets the value of the 'buying_criteria' field.
   * @param value the value to set.
   */
  public void setBuyingCriteria(com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria value) {
    this.buying_criteria = value;
  }

  /**
   * Gets the value of the 'order_policy' field.
   * @return The value of the 'order_policy' field.
   */
  public com.flipkart.marketplace.listings.schema.reverse.listing.order_policy getOrderPolicy() {
    return order_policy;
  }

  /**
   * Sets the value of the 'order_policy' field.
   * @param value the value to set.
   */
  public void setOrderPolicy(com.flipkart.marketplace.listings.schema.reverse.listing.order_policy value) {
    this.order_policy = value;
  }

  /**
   * Gets the value of the 'tax' field.
   * @return The value of the 'tax' field.
   */
  public com.flipkart.marketplace.listings.schema.reverse.listing.tax getTax() {
    return tax;
  }

  /**
   * Sets the value of the 'tax' field.
   * @param value the value to set.
   */
  public void setTax(com.flipkart.marketplace.listings.schema.reverse.listing.tax value) {
    this.tax = value;
  }

  /**
   * Creates a new reverse_listing RecordBuilder.
   * @return A new reverse_listing RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse_listing.Builder newBuilder() {
    return new com.flipkart.marketplace.listings.schema.reverse_listing.Builder();
  }

  /**
   * Creates a new reverse_listing RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new reverse_listing RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse_listing.Builder newBuilder(com.flipkart.marketplace.listings.schema.reverse_listing.Builder other) {
    return new com.flipkart.marketplace.listings.schema.reverse_listing.Builder(other);
  }

  /**
   * Creates a new reverse_listing RecordBuilder by copying an existing reverse_listing instance.
   * @param other The existing instance to copy.
   * @return A new reverse_listing RecordBuilder
   */
  public static com.flipkart.marketplace.listings.schema.reverse_listing.Builder newBuilder(com.flipkart.marketplace.listings.schema.reverse_listing other) {
    return new com.flipkart.marketplace.listings.schema.reverse_listing.Builder(other);
  }

  /**
   * RecordBuilder for reverse_listing instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<reverse_listing>
    implements org.apache.avro.data.RecordBuilder<reverse_listing> {

    private com.flipkart.marketplace.listings.schema.reverse.listing.price price;
    private com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder priceBuilder;
    private com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier seller_identifier;
    private com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.Builder seller_identifierBuilder;
    private com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria buying_criteria;
    private com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.Builder buying_criteriaBuilder;
    private com.flipkart.marketplace.listings.schema.reverse.listing.order_policy order_policy;
    private com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.Builder order_policyBuilder;
    private com.flipkart.marketplace.listings.schema.reverse.listing.tax tax;
    private com.flipkart.marketplace.listings.schema.reverse.listing.tax.Builder taxBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.flipkart.marketplace.listings.schema.reverse_listing.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (other.hasPriceBuilder()) {
        this.priceBuilder = com.flipkart.marketplace.listings.schema.reverse.listing.price.newBuilder(other.getPriceBuilder());
      }
      if (isValidValue(fields()[1], other.seller_identifier)) {
        this.seller_identifier = data().deepCopy(fields()[1].schema(), other.seller_identifier);
        fieldSetFlags()[1] = true;
      }
      if (other.hasSellerIdentifierBuilder()) {
        this.seller_identifierBuilder = com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.newBuilder(other.getSellerIdentifierBuilder());
      }
      if (isValidValue(fields()[2], other.buying_criteria)) {
        this.buying_criteria = data().deepCopy(fields()[2].schema(), other.buying_criteria);
        fieldSetFlags()[2] = true;
      }
      if (other.hasBuyingCriteriaBuilder()) {
        this.buying_criteriaBuilder = com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.newBuilder(other.getBuyingCriteriaBuilder());
      }
      if (isValidValue(fields()[3], other.order_policy)) {
        this.order_policy = data().deepCopy(fields()[3].schema(), other.order_policy);
        fieldSetFlags()[3] = true;
      }
      if (other.hasOrderPolicyBuilder()) {
        this.order_policyBuilder = com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.newBuilder(other.getOrderPolicyBuilder());
      }
      if (isValidValue(fields()[4], other.tax)) {
        this.tax = data().deepCopy(fields()[4].schema(), other.tax);
        fieldSetFlags()[4] = true;
      }
      if (other.hasTaxBuilder()) {
        this.taxBuilder = com.flipkart.marketplace.listings.schema.reverse.listing.tax.newBuilder(other.getTaxBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing reverse_listing instance
     * @param other The existing instance to copy.
     */
    private Builder(com.flipkart.marketplace.listings.schema.reverse_listing other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      this.priceBuilder = null;
      if (isValidValue(fields()[1], other.seller_identifier)) {
        this.seller_identifier = data().deepCopy(fields()[1].schema(), other.seller_identifier);
        fieldSetFlags()[1] = true;
      }
      this.seller_identifierBuilder = null;
      if (isValidValue(fields()[2], other.buying_criteria)) {
        this.buying_criteria = data().deepCopy(fields()[2].schema(), other.buying_criteria);
        fieldSetFlags()[2] = true;
      }
      this.buying_criteriaBuilder = null;
      if (isValidValue(fields()[3], other.order_policy)) {
        this.order_policy = data().deepCopy(fields()[3].schema(), other.order_policy);
        fieldSetFlags()[3] = true;
      }
      this.order_policyBuilder = null;
      if (isValidValue(fields()[4], other.tax)) {
        this.tax = data().deepCopy(fields()[4].schema(), other.tax);
        fieldSetFlags()[4] = true;
      }
      this.taxBuilder = null;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.price getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setPrice(com.flipkart.marketplace.listings.schema.reverse.listing.price value) {
      validate(fields()[0], value);
      this.priceBuilder = null;
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'price' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder getPriceBuilder() {
      if (priceBuilder == null) {
        if (hasPrice()) {
          setPriceBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.price.newBuilder(price));
        } else {
          setPriceBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.price.newBuilder());
        }
      }
      return priceBuilder;
    }

    /**
     * Sets the Builder instance for the 'price' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setPriceBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.price.Builder value) {
      clearPrice();
      priceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'price' field has an active Builder instance
     * @return True if the 'price' field has an active Builder instance
     */
    public boolean hasPriceBuilder() {
      return priceBuilder != null;
    }

    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder clearPrice() {
      price = null;
      priceBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'seller_identifier' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier getSellerIdentifier() {
      return seller_identifier;
    }

    /**
      * Sets the value of the 'seller_identifier' field.
      * @param value The value of 'seller_identifier'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setSellerIdentifier(com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier value) {
      validate(fields()[1], value);
      this.seller_identifierBuilder = null;
      this.seller_identifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'seller_identifier' field has been set.
      * @return True if the 'seller_identifier' field has been set, false otherwise.
      */
    public boolean hasSellerIdentifier() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'seller_identifier' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.Builder getSellerIdentifierBuilder() {
      if (seller_identifierBuilder == null) {
        if (hasSellerIdentifier()) {
          setSellerIdentifierBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.newBuilder(seller_identifier));
        } else {
          setSellerIdentifierBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.newBuilder());
        }
      }
      return seller_identifierBuilder;
    }

    /**
     * Sets the Builder instance for the 'seller_identifier' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setSellerIdentifierBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier.Builder value) {
      clearSellerIdentifier();
      seller_identifierBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'seller_identifier' field has an active Builder instance
     * @return True if the 'seller_identifier' field has an active Builder instance
     */
    public boolean hasSellerIdentifierBuilder() {
      return seller_identifierBuilder != null;
    }

    /**
      * Clears the value of the 'seller_identifier' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder clearSellerIdentifier() {
      seller_identifier = null;
      seller_identifierBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'buying_criteria' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria getBuyingCriteria() {
      return buying_criteria;
    }

    /**
      * Sets the value of the 'buying_criteria' field.
      * @param value The value of 'buying_criteria'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setBuyingCriteria(com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria value) {
      validate(fields()[2], value);
      this.buying_criteriaBuilder = null;
      this.buying_criteria = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'buying_criteria' field has been set.
      * @return True if the 'buying_criteria' field has been set, false otherwise.
      */
    public boolean hasBuyingCriteria() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'buying_criteria' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.Builder getBuyingCriteriaBuilder() {
      if (buying_criteriaBuilder == null) {
        if (hasBuyingCriteria()) {
          setBuyingCriteriaBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.newBuilder(buying_criteria));
        } else {
          setBuyingCriteriaBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.newBuilder());
        }
      }
      return buying_criteriaBuilder;
    }

    /**
     * Sets the Builder instance for the 'buying_criteria' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setBuyingCriteriaBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria.Builder value) {
      clearBuyingCriteria();
      buying_criteriaBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'buying_criteria' field has an active Builder instance
     * @return True if the 'buying_criteria' field has an active Builder instance
     */
    public boolean hasBuyingCriteriaBuilder() {
      return buying_criteriaBuilder != null;
    }

    /**
      * Clears the value of the 'buying_criteria' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder clearBuyingCriteria() {
      buying_criteria = null;
      buying_criteriaBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_policy' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.order_policy getOrderPolicy() {
      return order_policy;
    }

    /**
      * Sets the value of the 'order_policy' field.
      * @param value The value of 'order_policy'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setOrderPolicy(com.flipkart.marketplace.listings.schema.reverse.listing.order_policy value) {
      validate(fields()[3], value);
      this.order_policyBuilder = null;
      this.order_policy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'order_policy' field has been set.
      * @return True if the 'order_policy' field has been set, false otherwise.
      */
    public boolean hasOrderPolicy() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'order_policy' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.Builder getOrderPolicyBuilder() {
      if (order_policyBuilder == null) {
        if (hasOrderPolicy()) {
          setOrderPolicyBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.newBuilder(order_policy));
        } else {
          setOrderPolicyBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.newBuilder());
        }
      }
      return order_policyBuilder;
    }

    /**
     * Sets the Builder instance for the 'order_policy' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setOrderPolicyBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.order_policy.Builder value) {
      clearOrderPolicy();
      order_policyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'order_policy' field has an active Builder instance
     * @return True if the 'order_policy' field has an active Builder instance
     */
    public boolean hasOrderPolicyBuilder() {
      return order_policyBuilder != null;
    }

    /**
      * Clears the value of the 'order_policy' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder clearOrderPolicy() {
      order_policy = null;
      order_policyBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tax' field.
      * @return The value.
      */
    public com.flipkart.marketplace.listings.schema.reverse.listing.tax getTax() {
      return tax;
    }

    /**
      * Sets the value of the 'tax' field.
      * @param value The value of 'tax'.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setTax(com.flipkart.marketplace.listings.schema.reverse.listing.tax value) {
      validate(fields()[4], value);
      this.taxBuilder = null;
      this.tax = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tax' field has been set.
      * @return True if the 'tax' field has been set, false otherwise.
      */
    public boolean hasTax() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'tax' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse.listing.tax.Builder getTaxBuilder() {
      if (taxBuilder == null) {
        if (hasTax()) {
          setTaxBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.tax.newBuilder(tax));
        } else {
          setTaxBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.tax.newBuilder());
        }
      }
      return taxBuilder;
    }

    /**
     * Sets the Builder instance for the 'tax' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder setTaxBuilder(com.flipkart.marketplace.listings.schema.reverse.listing.tax.Builder value) {
      clearTax();
      taxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'tax' field has an active Builder instance
     * @return True if the 'tax' field has an active Builder instance
     */
    public boolean hasTaxBuilder() {
      return taxBuilder != null;
    }

    /**
      * Clears the value of the 'tax' field.
      * @return This builder.
      */
    public com.flipkart.marketplace.listings.schema.reverse_listing.Builder clearTax() {
      tax = null;
      taxBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public reverse_listing build() {
      try {
        reverse_listing record = new reverse_listing();
        if (priceBuilder != null) {
          record.price = this.priceBuilder.build();
        } else {
          record.price = fieldSetFlags()[0] ? this.price : (com.flipkart.marketplace.listings.schema.reverse.listing.price) defaultValue(fields()[0]);
        }
        if (seller_identifierBuilder != null) {
          record.seller_identifier = this.seller_identifierBuilder.build();
        } else {
          record.seller_identifier = fieldSetFlags()[1] ? this.seller_identifier : (com.flipkart.marketplace.listings.schema.reverse.listing.seller_identifier) defaultValue(fields()[1]);
        }
        if (buying_criteriaBuilder != null) {
          record.buying_criteria = this.buying_criteriaBuilder.build();
        } else {
          record.buying_criteria = fieldSetFlags()[2] ? this.buying_criteria : (com.flipkart.marketplace.listings.schema.reverse.listing.buying_criteria) defaultValue(fields()[2]);
        }
        if (order_policyBuilder != null) {
          record.order_policy = this.order_policyBuilder.build();
        } else {
          record.order_policy = fieldSetFlags()[3] ? this.order_policy : (com.flipkart.marketplace.listings.schema.reverse.listing.order_policy) defaultValue(fields()[3]);
        }
        if (taxBuilder != null) {
          record.tax = this.taxBuilder.build();
        } else {
          record.tax = fieldSetFlags()[4] ? this.tax : (com.flipkart.marketplace.listings.schema.reverse.listing.tax) defaultValue(fields()[4]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
