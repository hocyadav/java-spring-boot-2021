/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.hari.entity;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8276910543671013407L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"io.hari.entity\",\"fields\":[{\"name\":\"street\",\"type\":[\"null\",\"string\"]},{\"name\":\"pinCode\",\"type\":[\"null\",\"int\"]},{\"name\":\"country\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence street;
  @Deprecated public java.lang.Integer pinCode;
  @Deprecated public java.lang.CharSequence country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   * @param street The new value for street
   * @param pinCode The new value for pinCode
   * @param country The new value for country
   */
  public Address(java.lang.CharSequence street, java.lang.Integer pinCode, java.lang.CharSequence country) {
    this.street = street;
    this.pinCode = pinCode;
    this.country = country;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return street;
    case 1: return pinCode;
    case 2: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: street = (java.lang.CharSequence)value$; break;
    case 1: pinCode = (java.lang.Integer)value$; break;
    case 2: country = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'street' field.
   * @return The value of the 'street' field.
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'pinCode' field.
   * @return The value of the 'pinCode' field.
   */
  public java.lang.Integer getPinCode() {
    return pinCode;
  }

  /**
   * Sets the value of the 'pinCode' field.
   * @param value the value to set.
   */
  public void setPinCode(java.lang.Integer value) {
    this.pinCode = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Creates a new Address RecordBuilder.
   * @return A new Address RecordBuilder
   */
  public static io.hari.entity.Address.Builder newBuilder() {
    return new io.hari.entity.Address.Builder();
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Address RecordBuilder
   */
  public static io.hari.entity.Address.Builder newBuilder(io.hari.entity.Address.Builder other) {
    return new io.hari.entity.Address.Builder(other);
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Address instance.
   * @param other The existing instance to copy.
   * @return A new Address RecordBuilder
   */
  public static io.hari.entity.Address.Builder newBuilder(io.hari.entity.Address other) {
    return new io.hari.entity.Address.Builder(other);
  }

  /**
   * RecordBuilder for Address instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    private java.lang.CharSequence street;
    private java.lang.Integer pinCode;
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.hari.entity.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.street)) {
        this.street = data().deepCopy(fields()[0].schema(), other.street);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pinCode)) {
        this.pinCode = data().deepCopy(fields()[1].schema(), other.pinCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Address instance
     * @param other The existing instance to copy.
     */
    private Builder(io.hari.entity.Address other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.street)) {
        this.street = data().deepCopy(fields()[0].schema(), other.street);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pinCode)) {
        this.pinCode = data().deepCopy(fields()[1].schema(), other.pinCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreet() {
      return street;
    }

    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.street = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder clearStreet() {
      street = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pinCode' field.
      * @return The value.
      */
    public java.lang.Integer getPinCode() {
      return pinCode;
    }

    /**
      * Sets the value of the 'pinCode' field.
      * @param value The value of 'pinCode'.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder setPinCode(java.lang.Integer value) {
      validate(fields()[1], value);
      this.pinCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pinCode' field has been set.
      * @return True if the 'pinCode' field has been set, false otherwise.
      */
    public boolean hasPinCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pinCode' field.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder clearPinCode() {
      pinCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public io.hari.entity.Address.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Address build() {
      try {
        Address record = new Address();
        record.street = fieldSetFlags()[0] ? this.street : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.pinCode = fieldSetFlags()[1] ? this.pinCode : (java.lang.Integer) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
